// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	

	static boolean White;
	static boolean Black;
	static boolean color;
	static Array screen;

    /** Initializes the Screen. */
    function void init() {
		let screen = 16384;
		let White = false;
		let Black = true;
		let color = Black;
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int  i;
		let i = 0;
		while ( i < 8192 ) {
			let screen[i] = White;
			let i = i + 1;
		}
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let color = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int address, value;
		let address = (32 * y) + Math.divide(x , 16);
		
		let value = Math.powerOfTwo(x & 15);
		
		if (color) {
			let screen[address] = screen[address] | value;
		}
		else {
			let screen[address] = screen[address] & (~value);
		}


		return;
		
    }


	
/** Draws a vertical line from a given point (x,y) of a lngth l */

	function void drawVerticalLine(int x, int y, int l){
		
		var int d; 
		let d = 0;
		
		
		while ( ~( d > l)){
			do Screen.drawPixel( x , (y+d) );
			let d = d+1;
		}
		return;
		
	}

/** Draws a horizontal line from a given point (x, y ) of length l */

	function void drawHorizontalLine(int x, int y, int  l){
		var int d;
		let d = 0;
		
		while ( ~( d > l) ){
			do Screen.drawPixel( (x+d) , y);
			let d = d + 1;
		}
		return;
	}
    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
	function void drawDiagnolLine(int x1, int x2, int x3, int x4){

	}

	
    function void drawLine(int x1, int y1, int x2, int y2) {
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
    }
}
