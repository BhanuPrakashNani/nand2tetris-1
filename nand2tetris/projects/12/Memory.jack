// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

	static Array heap;
	static int heapBase, heapMax;
	static int size, nextNode,  EOList;

    /** Initializes the class. */
    function void init() {
		let heap = 0;
		let heapBase = 2048;
		let heapMax = 16384;
		let size = heapBase;
		let nextNode = heapBase + 1;
		let EOList = -1;
		let heap[size] = heapMax - heapBase;
		let heap[nextNode] = EOList; 
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return heap[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let heap[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var int currentNode;
		var int prevNode;
		var int next;
		var int returnAddress;


		let prevNode = size;
		let currentNode = size;
		let next = nextNode;
		let returnAddress = -1;

		while( ~ ( heap[currentNode] > size) & ~( heap[next] = EOList) ){
			let prevNode = currentNode;
			let currentNode = heap[next];
			let next = heap[next + 1];
			//using first fit.
			//TODO: have to  try implementing best fit.		
			
			if( ~ ( next = EOList) ){ // if found free block in the middle of the list
				if( currentNode < (size + 3)){
					let heap[ prevNode + 1 ] = heap[ currentNode +1];
					let heap[currentNode] = size + 1;
					let returnAddress = currentNode + 1;
				}
				else {
					let heap[currentNode] = heap[currentNode] - size - 1;
					let returnAddress = currentNode + heap[currentNode];
					let heap[returnAddress - 1 ] = size + 1;
				}
			}
			
		}
		return returnAddress;

    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		return;
    }    
}
